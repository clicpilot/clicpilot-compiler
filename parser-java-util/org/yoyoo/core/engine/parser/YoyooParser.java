/* Generated By:JJTree&JavaCC: Do not edit this line. YoyooParser.java */
package org.yoyoo.core.engine.parser;
import java.io.*;
import org.yoyoo.core.engine.compile.*;


public class YoyooParser/*@bgen(jjtree)*/implements YoyooParserTreeConstants, YoyooParserConstants {/*@bgen(jjtree)*/
  protected JJTYoyooParserState jjtree = new JJTYoyooParserState();
   private YoyooEnvironment env;
   private CompilationUnit unit;



  public static CompilationUnit parse(YoyooEnvironment env, File f) throws ParseException, FileNotFoundException, UnsupportedEncodingException {

           YoyooParser parser = new YoyooParser(new SimpleCharStream(new InputStreamReader(new FileInputStream(f), "UTF-8")));
           parser.unit = new CompilationUnit(env, f);
           parser.env = env;
           parser.unit.compileStart();
           parser.parseCompilationUnit();
           parser.unit.compileEnd();
           if(parser.token_source.containsPreProcessorStm()) {
           parser.unit.setPreProcessorTokenList(parser.token_source.getPreProcessorTokens());
       }
           return parser.unit;

  }

  public static CompilationUnit parse(YoyooEnvironment env, String src, File f) throws ParseException, UnsupportedEncodingException {

           YoyooParser parser = new YoyooParser(new SimpleCharStream(new StringReader(src)));
           parser.unit = new CompilationUnit(env, src, f);
           parser.env = env;
           parser.unit.compileStart();
           parser.parseCompilationUnit();
           parser.unit.compileEnd();
           if(parser.token_source.containsPreProcessorStm()) {
           parser.unit.setPreProcessorTokenList(parser.token_source.getPreProcessorTokens());
       }
           return parser.unit;

  }

   public static CompilationUnit parse(YoyooEnvironment env, String src) throws ParseException, UnsupportedEncodingException {

           YoyooParser parser = new YoyooParser(new SimpleCharStream(new StringReader(src)));
           parser.unit = new CompilationUnit(env, src);
           parser.env = env;
           parser.unit.compileStart();
           parser.parseCompilationUnit();
           parser.unit.compileEnd();
           if(parser.token_source.containsPreProcessorStm()) {
           parser.unit.setPreProcessorTokenList(parser.token_source.getPreProcessorTokens());
       }
           return parser.unit;

  }


        void jjtreeOpenNodeScope(Node n)
        {
                ((SimpleNode)n).first_token = this.getToken(1);
        }

        void jjtreeCloseNodeScope(Node n)
        {
                ((SimpleNode)n).last_token = this.getToken(0);
        }

/*****************************************
 * THE YOYOO LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void parseCompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
        YoyooCompilationUnit jjtn000 = new YoyooCompilationUnit(JJTCOMPILATIONUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);unit.setCompilationUnitNode(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        PackageDeclaration();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case INTERFACE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SEMICOLON:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();
      }
      jj_consume_token(0);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void PackageDeclaration() throws ParseException {
 /*@bgen(jjtree) PackageDecl */
        YoyooPackageDecl jjtn000 = new YoyooPackageDecl(JJTPACKAGEDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);String name = null;
    try {
      jj_consume_token(PACKAGE);
      name = Name();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtAccept(unit, name);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {
 /*@bgen(jjtree) ImportDecl */
        YoyooImportDecl jjtn000 = new YoyooImportDecl(JJTIMPORTDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);String name = null;
    try {
      jj_consume_token(IMPORT);
      name = Name();
      jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
        jjtn000.jjtAccept(unit, name);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TypeDeclaration() throws ParseException {
 /*@bgen(jjtree) TypeDecl */
        YoyooTypeDecl jjtn000 = new YoyooTypeDecl(JJTTYPEDECL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);boolean isInterface = false;
        boolean isAbstract = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case INTERFACE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case IDENTIFIER:
        Modifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
                          YoyooAbstract jjtn001 = new YoyooAbstract(JJTABSTRACT);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtreeOpenNodeScope(jjtn001);
          try {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
                          jjtreeCloseNodeScope(jjtn001);
                         isAbstract=true;
          } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtreeCloseNodeScope(jjtn001);
                          }
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
                                                       YoyooTypeDeclName jjtn002 = new YoyooTypeDeclName(JJTTYPEDECLNAME);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                       jjtreeOpenNodeScope(jjtn002);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                    jjtc002 = false;
                                                                    jjtreeCloseNodeScope(jjtn002);
                                                                   isInterface=false;
            break;
          case INTERFACE:
            jj_consume_token(INTERFACE);
                                                                                                    jjtree.closeNodeScope(jjtn002, true);
                                                                                                    jjtc002 = false;
                                                                                                    jjtreeCloseNodeScope(jjtn002);
                                                                                                   isInterface=true;
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                         jjtreeCloseNodeScope(jjtn002);
                                                       }
        }
        UnmodifiedClassDeclaration(isInterface, isAbstract);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
        jjtn000.childrenAccept(unit, jjtn000);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
 * Declaration syntax follows.
 */
  final public void Modifier() throws ParseException {
 /*@bgen(jjtree) Modifier */
  YoyooModifier jjtn000 = new YoyooModifier(JJTMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PROTECTED:
          jj_consume_token(PROTECTED);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void UnmodifiedClassDeclaration(boolean isInterface, boolean isAbstract) throws ParseException {
    YoyooDeclarationName jjtn001 = new YoyooDeclarationName(JJTDECLARATIONNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsList(isInterface);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(isInterface);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    ClassBody(isInterface, isAbstract);
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ExtendsList */
   YoyooExtendsList jjtn000 = new YoyooExtendsList(JJTEXTENDSLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtreeOpenNodeScope(jjtn000);boolean extendsMoreThanOne = false;
    try {
      jj_consume_token(EXTENDS);
                YoyooExtendsName jjtn001 = new YoyooExtendsName(JJTEXTENDSNAME);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        ClassOrInterfaceType();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
            YoyooExtendsName jjtn002 = new YoyooExtendsName(JJTEXTENDSNAME);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
        try {
          ClassOrInterfaceType();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
        }
                                                extendsMoreThanOne = true;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
      if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
 /*@bgen(jjtree) ImplementsList */
  YoyooImplementsList jjtn000 = new YoyooImplementsList(JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IMPLEMENTS);
                   YoyooImplementsName jjtn001 = new YoyooImplementsName(JJTIMPLEMENTSNAME);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
      try {
        ClassOrInterfaceType();
      } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
      } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
            YoyooImplementsName jjtn002 = new YoyooImplementsName(JJTIMPLEMENTSNAME);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtreeOpenNodeScope(jjtn002);
        try {
          ClassOrInterfaceType();
        } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
        } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
              jjtreeCloseNodeScope(jjtn002);
            }
        }
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtreeCloseNodeScope(jjtn000);
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void ClassBody(boolean isInterface, boolean isAbstract) throws ParseException {
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case VOID:
      case STRING:
      case YOYOOEXPR:
      case YOYOOREF:
      case SEMICOLON:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      ClassBodyDeclaration(isInterface, isAbstract);
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassBodyDeclaration(boolean isInterface, boolean isAbstract) throws ParseException {
    if (jj_2_1(2147483647)) {
      ConstructorDeclaration();
      if (isInterface)
         {if (true) throw new ParseException("An interface cannot have constructor");}
    } else if (jj_2_2(2147483647)) {
      MethodDeclaration(isInterface, isAbstract);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRING:
      case YOYOOEXPR:
      case YOYOOREF:
      case IDENTIFIER:
        FieldDeclaration();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

// This production is to determine lookahead only.
  final public void ConstructorDeclarationLookahead() throws ParseException {
    Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
                YoyooStatic jjtn001 = new YoyooStatic(JJTSTATIC);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(STATIC);
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  final public void ConstructorDeclaration() throws ParseException {
 /*@bgen(jjtree) Constructor */
        YoyooConstructor jjtn000 = new YoyooConstructor(JJTCONSTRUCTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtreeOpenNodeScope(jjtn000);Token t;
    try {
      Modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
                YoyooStatic jjtn001 = new YoyooStatic(JJTSTATIC);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(STATIC);
        } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    YoyooConstructorName jjtn002 = new YoyooConstructorName(JJTCONSTRUCTORNAME);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        ThrowsNameList();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    YoyooConstructorBody jjtn003 = new YoyooConstructorBody(JJTCONSTRUCTORBODY);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(LBRACE);
        if (jj_2_3(2147483647)) {
          ExplicitConstructorInvocation();
        } else {
          ;
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case BREAK:
          case CHAR:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case RETURN:
          case SHORT:
          case SUPER:
          case SWITCH:
          case THIS:
          case THROW:
          case SYNCHRONIZED:
          case TRUE:
          case TRY:
          case WHILE:
          case STRING:
          case YOYOOEXPR:
          case YOYOOREF:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case MULTILINE_STRING_LITERAL:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:
          case SLASH:
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_6;
          }
          BlockStatement();
        }
        jj_consume_token(RBRACE);
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
 /*@bgen(jjtree) ExplicitConstructor */
  YoyooExplicitConstructor jjtn000 = new YoyooExplicitConstructor(JJTEXPLICITCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_5(2147483647)) {
                                      YoyooThisExplicitConstructor jjtn001 = new YoyooThisExplicitConstructor(JJTTHISEXPLICITCONSTRUCTOR);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(THIS);
        } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001, true);
                                        jjtreeCloseNodeScope(jjtn001);
                                      }
        }
                                                                      YoyooArguments jjtn002 = new YoyooArguments(JJTARGUMENTS);
                                                                      boolean jjtc002 = true;
                                                                      jjtree.openNodeScope(jjtn002);
                                                                      jjtreeOpenNodeScope(jjtn002);
        try {
          Arguments();
        } catch (Throwable jjte002) {
                                                                      if (jjtc002) {
                                                                        jjtree.clearNodeScope(jjtn002);
                                                                        jjtc002 = false;
                                                                      } else {
                                                                        jjtree.popNode();
                                                                      }
                                                                      if (jjte002 instanceof RuntimeException) {
                                                                        {if (true) throw (RuntimeException)jjte002;}
                                                                      }
                                                                      if (jjte002 instanceof ParseException) {
                                                                        {if (true) throw (ParseException)jjte002;}
                                                                      }
                                                                      {if (true) throw (Error)jjte002;}
        } finally {
                                                                      if (jjtc002) {
                                                                        jjtree.closeNodeScope(jjtn002, true);
                                                                        jjtreeCloseNodeScope(jjtn002);
                                                                      }
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case MULTILINE_STRING_LITERAL:
        case LPAREN:
        case SLASH:
        case IDENTIFIER:
          if (jj_2_4(2)) {
            PrimaryExpression(0);
            jj_consume_token(DOT);
          } else {
            ;
          }
                                              YoyooSuperExplicitConstructor jjtn003 = new YoyooSuperExplicitConstructor(JJTSUPEREXPLICITCONSTRUCTOR);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                              jjtreeOpenNodeScope(jjtn003);
          try {
            jj_consume_token(SUPER);
          } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003, true);
                                                jjtreeCloseNodeScope(jjtn003);
                                              }
          }
                                                                               YoyooArguments jjtn004 = new YoyooArguments(JJTARGUMENTS);
                                                                               boolean jjtc004 = true;
                                                                               jjtree.openNodeScope(jjtn004);
                                                                               jjtreeOpenNodeScope(jjtn004);
          try {
            Arguments();
          } catch (Throwable jjte004) {
                                                                               if (jjtc004) {
                                                                                 jjtree.clearNodeScope(jjtn004);
                                                                                 jjtc004 = false;
                                                                               } else {
                                                                                 jjtree.popNode();
                                                                               }
                                                                               if (jjte004 instanceof RuntimeException) {
                                                                                 {if (true) throw (RuntimeException)jjte004;}
                                                                               }
                                                                               if (jjte004 instanceof ParseException) {
                                                                                 {if (true) throw (ParseException)jjte004;}
                                                                               }
                                                                               {if (true) throw (Error)jjte004;}
          } finally {
                                                                               if (jjtc004) {
                                                                                 jjtree.closeNodeScope(jjtn004, true);
                                                                                 jjtreeCloseNodeScope(jjtn004);
                                                                               }
          }
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

// This production is to determine lookahead only.
  final public void MethodDeclarationLookahead() throws ParseException {
    Modifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
                YoyooStatic jjtn001 = new YoyooStatic(JJTSTATIC);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(STATIC);
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
                                  YoyooAbstract jjtn002 = new YoyooAbstract(JJTABSTRACT);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                  jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(ABSTRACT);
      } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                    jjtreeCloseNodeScope(jjtn002);
                                  }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    ResultType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
  }

  final public void MethodDeclaration(boolean isInterface, boolean isAbstract) throws ParseException {
 /*@bgen(jjtree) MedthodDecl */
  YoyooMedthodDecl jjtn000 = new YoyooMedthodDecl(JJTMEDTHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
                 YoyooStatic jjtn001 = new YoyooStatic(JJTSTATIC);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(STATIC);
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
                                   YoyooAbstract jjtn002 = new YoyooAbstract(JJTABSTRACT);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                   jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(ABSTRACT);
        } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                     jjtreeCloseNodeScope(jjtn002);
                                   }
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      ResultType();
      MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THROWS:
        jj_consume_token(THROWS);
        ThrowsNameList();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
          YoyooMedthodDeclBody jjtn003 = new YoyooMedthodDeclBody(JJTMEDTHODDECLBODY);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
        try {
          Block();
        } catch (Throwable jjte003) {
          if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtreeCloseNodeScope(jjtn003);
          }
        }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
              if (isInterface)
                 {if (true) throw new ParseException("The method cannot have method body");}
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtreeCloseNodeScope(jjtn000);
              if (!isInterface && !isAbstract)
                 {if (true) throw new ParseException("The method must have method body");}
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {
    YoyooMethodName jjtn001 = new YoyooMethodName(JJTMETHODNAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    FormalParameters();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void FieldDeclaration() throws ParseException {
 /*@bgen(jjtree) FieldDecl */
  YoyooFieldDecl jjtn000 = new YoyooFieldDecl(JJTFIELDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      Modifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
                YoyooStatic jjtn001 = new YoyooStatic(JJTSTATIC);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(STATIC);
        } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
        }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
                                  YoyooFinal jjtn002 = new YoyooFinal(JJTFINAL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                  jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(FINAL);
        } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                    jjtreeCloseNodeScope(jjtn002);
                                  }
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case IDENTIFIER:
        Type();
        break;
      case YOYOOREF:
        Ref();
        break;
      case YOYOOEXPR:
        SpecialExprType();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      VariableDeclarator();
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {
    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
 /*@bgen(jjtree) VariableDeclaratorId */
  YoyooVariableDeclaratorId jjtn000 = new YoyooVariableDeclaratorId(JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_8;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VariableInitializer() throws ParseException {
 /*@bgen(jjtree) VariableInitializer */
  YoyooVariableInitializer jjtn000 = new YoyooVariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ArrayInitializer();
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
      case IDENTIFIER:
        Expression();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInit */
  YoyooArrayInit jjtn000 = new YoyooArrayInit(JJTARRAYINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
      case IDENTIFIER:
        VariableInitializer();
        label_9:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
  YoyooFormalParameters jjtn000 = new YoyooFormalParameters(JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case IDENTIFIER:
        FormalParameter();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          FormalParameter();
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  YoyooFormalParameter jjtn000 = new YoyooFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
    YoyooFormalParameterType jjtn001 = new YoyooFormalParameterType(JJTFORMALPARAMETERTYPE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    YoyooFormalParameterName jjtn002 = new YoyooFormalParameterName(JJTFORMALPARAMETERNAME);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
        VariableDeclaratorId();
      } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
void ConstructorDeclaration() #void :
{}
{
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}"
}

void ExplicitConstructorInvocation() #void :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

void Initializer() #void :
{}
{
  Block()
}
*/

/*
 * Type, name and expression syntax follows.
 */
/*
void Type() #void :
{}
{
	
	( 
		(PrimitiveType()#PrimitiveTypeName) 
		(( LOOKAHEAD(2)("[" "]")#ArrayDecl )*) 
	)  #PrimitiveType
	|
	( 
		(Name()#ReferenceTypeName) 
		(( LOOKAHEAD(2)("[" "]")#ArrayDecl )*)  
	) #ReferenceNameType
	
	 
	
}
*/
  final public void Type() throws ParseException {
    if (jj_2_7(2)) {
      ReferenceType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
     YoyooPrimitiveType jjtn001 = new YoyooPrimitiveType(JJTPRIMITIVETYPE);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
        try {
          PrimitiveType();
        } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveTypeName */
  YoyooPrimitiveTypeName jjtn000 = new YoyooPrimitiveTypeName(JJTPRIMITIVETYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
    }
  }

  final public void ReferenceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case STRING:
     YoyooPrimitiveType jjtn002 = new YoyooPrimitiveType(JJTPRIMITIVETYPE);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
     jjtreeOpenNodeScope(jjtn002);
      try {
        PrimitiveType();
        label_11:
        while (true) {
                                        YoyooArrayDecl jjtn001 = new YoyooArrayDecl(JJTARRAYDECL);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
                                        jjtreeOpenNodeScope(jjtn001);
          try {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                          jjtreeCloseNodeScope(jjtn001);
                                        }
          }
          if (jj_2_8(2)) {
            ;
          } else {
            break label_11;
          }
        }
      } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
      } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
       jjtreeCloseNodeScope(jjtn002);
     }
      }
      break;
    case IDENTIFIER:
     YoyooReferenceType jjtn004 = new YoyooReferenceType(JJTREFERENCETYPE);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
     jjtreeOpenNodeScope(jjtn004);
      try {
        ClassOrInterfaceType();
        label_12:
        while (true) {
          if (jj_2_9(2)) {
            ;
          } else {
            break label_12;
          }
                                                YoyooArrayDecl jjtn003 = new YoyooArrayDecl(JJTARRAYDECL);
                                                boolean jjtc003 = true;
                                                jjtree.openNodeScope(jjtn003);
                                                jjtreeOpenNodeScope(jjtn003);
          try {
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
          } finally {
                                                if (jjtc003) {
                                                  jjtree.closeNodeScope(jjtn003, true);
                                                  jjtreeCloseNodeScope(jjtn003);
                                                }
          }
        }
      } catch (Throwable jjte004) {
     if (jjtc004) {
       jjtree.clearNodeScope(jjtn004);
       jjtc004 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte004 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte004;}
     }
     if (jjte004 instanceof ParseException) {
       {if (true) throw (ParseException)jjte004;}
     }
     {if (true) throw (Error)jjte004;}
      } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
       jjtreeCloseNodeScope(jjtn004);
     }
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
    YoyooClassOrInterfaceName jjtn001 = new YoyooClassOrInterfaceName(JJTCLASSORINTERFACENAME);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(IDENTIFIER);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    if (jj_2_10(2)) {
                                                     YoyooClassOrInterfaceTypeArguments jjtn002 = new YoyooClassOrInterfaceTypeArguments(JJTCLASSORINTERFACETYPEARGUMENTS);
                                                     boolean jjtc002 = true;
                                                     jjtree.openNodeScope(jjtn002);
                                                     jjtreeOpenNodeScope(jjtn002);
      try {
        TypeArguments();
      } catch (Throwable jjte002) {
                                                     if (jjtc002) {
                                                       jjtree.clearNodeScope(jjtn002);
                                                       jjtc002 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte002 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte002;}
                                                     }
                                                     if (jjte002 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte002;}
                                                     }
                                                     {if (true) throw (Error)jjte002;}
      } finally {
                                                     if (jjtc002) {
                                                       jjtree.closeNodeScope(jjtn002, true);
                                                       jjtreeCloseNodeScope(jjtn002);
                                                     }
      }
    } else {
      ;
    }
    label_13:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(DOT);
                       YoyooClassOrInterfaceName jjtn003 = new YoyooClassOrInterfaceName(JJTCLASSORINTERFACENAME);
                       boolean jjtc003 = true;
                       jjtree.openNodeScope(jjtn003);
                       jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
                       if (jjtc003) {
                         jjtree.closeNodeScope(jjtn003, true);
                         jjtreeCloseNodeScope(jjtn003);
                       }
      }
      if (jj_2_12(2)) {
                                                                        YoyooClassOrInterfaceTypeArguments jjtn004 = new YoyooClassOrInterfaceTypeArguments(JJTCLASSORINTERFACETYPEARGUMENTS);
                                                                        boolean jjtc004 = true;
                                                                        jjtree.openNodeScope(jjtn004);
                                                                        jjtreeOpenNodeScope(jjtn004);
        try {
          TypeArguments();
        } catch (Throwable jjte004) {
                                                                        if (jjtc004) {
                                                                          jjtree.clearNodeScope(jjtn004);
                                                                          jjtc004 = false;
                                                                        } else {
                                                                          jjtree.popNode();
                                                                        }
                                                                        if (jjte004 instanceof RuntimeException) {
                                                                          {if (true) throw (RuntimeException)jjte004;}
                                                                        }
                                                                        if (jjte004 instanceof ParseException) {
                                                                          {if (true) throw (ParseException)jjte004;}
                                                                        }
                                                                        {if (true) throw (Error)jjte004;}
        } finally {
                                                                        if (jjtc004) {
                                                                          jjtree.closeNodeScope(jjtn004, true);
                                                                          jjtreeCloseNodeScope(jjtn004);
                                                                        }
        }
      } else {
        ;
      }
    }
  }

  final public void ResultType() throws ParseException {
 /*@bgen(jjtree) ResultType */
  YoyooResultType jjtn000 = new YoyooResultType(JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
    YoyooVoidType jjtn001 = new YoyooVoidType(JJTVOIDTYPE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(VOID);
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
        }
        break;
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case IDENTIFIER:
        Type();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TypeArguments() throws ParseException {
    jj_consume_token(LT);
    TypeArgument();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      TypeArgument();
    }
    jj_consume_token(GT);
  }

  final public void TypeArgument() throws ParseException {
 /*@bgen(jjtree) TypeArgument */
  YoyooTypeArgument jjtn000 = new YoyooTypeArgument(JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_13(2)) {
                  YoyooTypeArgumentType jjtn002 = new YoyooTypeArgumentType(JJTTYPEARGUMENTTYPE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
        try {
                   YoyooPrimitiveType jjtn001 = new YoyooPrimitiveType(JJTPRIMITIVETYPE);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtreeOpenNodeScope(jjtn001);
          try {
            PrimitiveType();
          } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
          } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtreeCloseNodeScope(jjtn001);
                   }
          }
        } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
        }
      } else if (jj_2_14(2)) {
                  YoyooTypeArgumentType jjtn003 = new YoyooTypeArgumentType(JJTTYPEARGUMENTTYPE);
                  boolean jjtc003 = true;
                  jjtree.openNodeScope(jjtn003);
                  jjtreeOpenNodeScope(jjtn003);
        try {
          ReferenceType();
        } catch (Throwable jjte003) {
                  if (jjtc003) {
                    jjtree.clearNodeScope(jjtn003);
                    jjtc003 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte003 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte003;}
                  }
                  if (jjte003 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte003;}
                  }
                  {if (true) throw (Error)jjte003;}
        } finally {
                  if (jjtc003) {
                    jjtree.closeNodeScope(jjtn003, true);
                    jjtreeCloseNodeScope(jjtn003);
                  }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HOOK:
          jj_consume_token(HOOK);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTENDS:
          case SUPER:
            WildcardBounds();
            break;
          default:
            jj_la1[42] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void WildcardBounds() throws ParseException {
 /*@bgen(jjtree) WildcardBounds */
  YoyooWildcardBounds jjtn000 = new YoyooWildcardBounds(JJTWILDCARDBOUNDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
     YoyooWildcardBoundsExtends jjtn001 = new YoyooWildcardBoundsExtends(JJTWILDCARDBOUNDSEXTENDS);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(EXTENDS);
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
        }
                                     YoyooWildcardBoundsType jjtn002 = new YoyooWildcardBoundsType(JJTWILDCARDBOUNDSTYPE);
                                     boolean jjtc002 = true;
                                     jjtree.openNodeScope(jjtn002);
                                     jjtreeOpenNodeScope(jjtn002);
        try {
          ReferenceType();
        } catch (Throwable jjte002) {
                                     if (jjtc002) {
                                       jjtree.clearNodeScope(jjtn002);
                                       jjtc002 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte002 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte002;}
                                     }
                                     if (jjte002 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte002;}
                                     }
                                     {if (true) throw (Error)jjte002;}
        } finally {
                                     if (jjtc002) {
                                       jjtree.closeNodeScope(jjtn002, true);
                                       jjtreeCloseNodeScope(jjtn002);
                                     }
        }
        break;
      case SUPER:
     YoyooWildcardBoundsSuper jjtn003 = new YoyooWildcardBoundsSuper(JJTWILDCARDBOUNDSSUPER);
     boolean jjtc003 = true;
     jjtree.openNodeScope(jjtn003);
     jjtreeOpenNodeScope(jjtn003);
        try {
          jj_consume_token(SUPER);
        } finally {
     if (jjtc003) {
       jjtree.closeNodeScope(jjtn003, true);
       jjtreeCloseNodeScope(jjtn003);
     }
        }
                                 YoyooWildcardBoundsType jjtn004 = new YoyooWildcardBoundsType(JJTWILDCARDBOUNDSTYPE);
                                 boolean jjtc004 = true;
                                 jjtree.openNodeScope(jjtn004);
                                 jjtreeOpenNodeScope(jjtn004);
        try {
          ReferenceType();
        } catch (Throwable jjte004) {
                                 if (jjtc004) {
                                   jjtree.clearNodeScope(jjtn004);
                                   jjtc004 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte004 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte004;}
                                 }
                                 if (jjte004 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte004;}
                                 }
                                 {if (true) throw (Error)jjte004;}
        } finally {
                                 if (jjtc004) {
                                   jjtree.closeNodeScope(jjtn004, true);
                                   jjtreeCloseNodeScope(jjtn004);
                                 }
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void TypeParameters() throws ParseException {
 /*@bgen(jjtree) TypeParameters */
  YoyooTypeParameters jjtn000 = new YoyooTypeParameters(JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LT);
      TypeParameter();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        TypeParameter();
      }
      jj_consume_token(GT);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void TypeParameter() throws ParseException {
 /*@bgen(jjtree) TypeParameter */
  YoyooTypeParameter jjtn000 = new YoyooTypeParameter(JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
     YoyooTypeParameterName jjtn001 = new YoyooTypeParameterName(JJTTYPEPARAMETERNAME);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        TypeBound();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtreeCloseNodeScope(jjtn000);
     }
    }
  }

  final public void TypeBound() throws ParseException {
    jj_consume_token(EXTENDS);
                YoyooTypeBoundName jjtn001 = new YoyooTypeBoundName(JJTTYPEBOUNDNAME);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
    try {
      ClassOrInterfaceType();
    } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_16;
      }
      jj_consume_token(115);
                                                             YoyooTypeBoundName jjtn002 = new YoyooTypeBoundName(JJTTYPEBOUNDNAME);
                                                             boolean jjtc002 = true;
                                                             jjtree.openNodeScope(jjtn002);
                                                             jjtreeOpenNodeScope(jjtn002);
      try {
        ClassOrInterfaceType();
      } catch (Throwable jjte002) {
                                                             if (jjtc002) {
                                                               jjtree.clearNodeScope(jjtn002);
                                                               jjtc002 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte002 instanceof RuntimeException) {
                                                               {if (true) throw (RuntimeException)jjte002;}
                                                             }
                                                             if (jjte002 instanceof ParseException) {
                                                               {if (true) throw (ParseException)jjte002;}
                                                             }
                                                             {if (true) throw (Error)jjte002;}
      } finally {
                                                             if (jjtc002) {
                                                               jjtree.closeNodeScope(jjtn002, true);
                                                               jjtreeCloseNodeScope(jjtn002);
                                                             }
      }
    }
  }

  final public String Name() throws ParseException {
        Token t;
        StringBuffer sb = new StringBuffer();
    t = jj_consume_token(IDENTIFIER);
                    sb.append(t.image);
    label_17:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                                       sb.append("."); sb.append(t.image);
    }
        {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void ThrowsNameList() throws ParseException {
 /*@bgen(jjtree) ThrowsNameList */
  YoyooThrowsNameList jjtn000 = new YoyooThrowsNameList(JJTTHROWSNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
     YoyooThrowName jjtn001 = new YoyooThrowName(JJTTHROWNAME);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
      try {
        Name();
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
      }
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
           YoyooThrowName jjtn002 = new YoyooThrowName(JJTTHROWNAME);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
        try {
          Name();
        } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
        } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtreeCloseNodeScope(jjtn002);
           }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    ConditionalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case 116:
      AssignmentOperator();
                           YoyooAssignExpr jjtn002 = new YoyooAssignExpr(JJTASSIGNEXPR);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                           jjtreeOpenNodeScope(jjtn002);
      try {
                            YoyooAssignVal jjtn001 = new YoyooAssignVal(JJTASSIGNVAL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte001;}
                            }
                            if (jjte001 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte001;}
                            }
                            {if (true) throw (Error)jjte001;}
        } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
        }
      } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
      } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  3);
                             jjtreeCloseNodeScope(jjtn002);
                           }
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
 /*@bgen(jjtree) AssignmentOperator */
  YoyooAssignmentOperator jjtn000 = new YoyooAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        break;
      case STARASSIGN:
        jj_consume_token(STARASSIGN);
        break;
      case SLASHASSIGN:
        jj_consume_token(SLASHASSIGN);
        break;
      case 116:
        jj_consume_token(116);
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
        YoyooCondTrueExpr jjtn001 = new YoyooCondTrueExpr(JJTCONDTRUEEXPR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
      } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
      }
      jj_consume_token(COLON);
                                       YoyooCondExpr jjtn003 = new YoyooCondExpr(JJTCONDEXPR);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
                                       jjtreeOpenNodeScope(jjtn003);
      try {
                                        YoyooCondFalseExpr jjtn002 = new YoyooCondFalseExpr(JJTCONDFALSEEXPR);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                        jjtreeOpenNodeScope(jjtn002);
        try {
          ConditionalExpression();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
        }
      } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte003;}
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte003;}
                                       }
                                       {if (true) throw (Error)jjte003;}
      } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  3);
                                         jjtreeCloseNodeScope(jjtn003);
                                       }
      }
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_19;
      }
                                   YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(SC_OR);
      } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtreeCloseNodeScope(jjtn001);
                                   }
      }
                                              YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                              jjtreeOpenNodeScope(jjtn002);
      try {
        ConditionalAndExpression();
      } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte002;}
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte002;}
                                              }
                                              {if (true) throw (Error)jjte002;}
      } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  3);
                                                jjtreeCloseNodeScope(jjtn002);
                                              }
      }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    EqualityExpression();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_20;
      }
                             YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(SC_AND);
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtreeCloseNodeScope(jjtn001);
                             }
      }
                                       YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                       boolean jjtc002 = true;
                                       jjtree.openNodeScope(jjtn002);
                                       jjtreeOpenNodeScope(jjtn002);
      try {
        EqualityExpression();
      } catch (Throwable jjte002) {
                                       if (jjtc002) {
                                         jjtree.clearNodeScope(jjtn002);
                                         jjtc002 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte002 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte002;}
                                       }
                                       if (jjte002 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte002;}
                                       }
                                       {if (true) throw (Error)jjte002;}
      } finally {
                                       if (jjtc002) {
                                         jjtree.closeNodeScope(jjtn002,  3);
                                         jjtreeCloseNodeScope(jjtn002);
                                       }
      }
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[54] = jj_gen;
        break label_21;
      }
                             YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(EQ);
          break;
        case NE:
          jj_consume_token(NE);
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtreeCloseNodeScope(jjtn001);
                             }
      }
                                                 YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                                 boolean jjtc002 = true;
                                                 jjtree.openNodeScope(jjtn002);
                                                 jjtreeOpenNodeScope(jjtn002);
      try {
        InstanceOfExpression();
      } catch (Throwable jjte002) {
                                                 if (jjtc002) {
                                                   jjtree.clearNodeScope(jjtn002);
                                                   jjtc002 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte002 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte002;}
                                                 }
                                                 if (jjte002 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte002;}
                                                 }
                                                 {if (true) throw (Error)jjte002;}
      } finally {
                                                 if (jjtc002) {
                                                   jjtree.closeNodeScope(jjtn002,  3);
                                                   jjtreeCloseNodeScope(jjtn002);
                                                 }
      }
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
                             YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(INSTANCEOF);
      } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtreeCloseNodeScope(jjtn001);
                             }
      }
                                              YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                              jjtreeOpenNodeScope(jjtn002);
      try {
        Type();
      } catch (Throwable jjte002) {
                                              if (jjtc002) {
                                                jjtree.clearNodeScope(jjtn002);
                                                jjtc002 = false;
                                              } else {
                                                jjtree.popNode();
                                              }
                                              if (jjte002 instanceof RuntimeException) {
                                                {if (true) throw (RuntimeException)jjte002;}
                                              }
                                              if (jjte002 instanceof ParseException) {
                                                {if (true) throw (ParseException)jjte002;}
                                              }
                                              {if (true) throw (Error)jjte002;}
      } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  3);
                                                jjtreeCloseNodeScope(jjtn002);
                                              }
      }
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case LE:
      case GE:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_22;
      }
                            YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
      }
                                                              YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                                              boolean jjtc002 = true;
                                                              jjtree.openNodeScope(jjtn002);
                                                              jjtreeOpenNodeScope(jjtn002);
      try {
        AdditiveExpression();
      } catch (Throwable jjte002) {
                                                              if (jjtc002) {
                                                                jjtree.clearNodeScope(jjtn002);
                                                                jjtc002 = false;
                                                              } else {
                                                                jjtree.popNode();
                                                              }
                                                              if (jjte002 instanceof RuntimeException) {
                                                                {if (true) throw (RuntimeException)jjte002;}
                                                              }
                                                              if (jjte002 instanceof ParseException) {
                                                                {if (true) throw (ParseException)jjte002;}
                                                              }
                                                              {if (true) throw (Error)jjte002;}
      } finally {
                                                              if (jjtc002) {
                                                                jjtree.closeNodeScope(jjtn002,  3);
                                                                jjtreeCloseNodeScope(jjtn002);
                                                              }
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_23;
      }
                                  YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
      }
                                                      YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                                      boolean jjtc002 = true;
                                                      jjtree.openNodeScope(jjtn002);
                                                      jjtreeOpenNodeScope(jjtn002);
      try {
        MultiplicativeExpression();
      } catch (Throwable jjte002) {
                                                      if (jjtc002) {
                                                        jjtree.clearNodeScope(jjtn002);
                                                        jjtc002 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte002 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte002;}
                                                      }
                                                      if (jjte002 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte002;}
                                                      }
                                                      {if (true) throw (Error)jjte002;}
      } finally {
                                                      if (jjtc002) {
                                                        jjtree.closeNodeScope(jjtn002,  3);
                                                        jjtreeCloseNodeScope(jjtn002);
                                                      }
      }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression(0);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_24;
      }
                        YoyooOpt jjtn001 = new YoyooOpt(JJTOPT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case SLASH:
          jj_consume_token(SLASH);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtreeCloseNodeScope(jjtn001);
                        }
      }
                                                  YoyooBionExpr jjtn002 = new YoyooBionExpr(JJTBIONEXPR);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
                                                  jjtreeOpenNodeScope(jjtn002);
      try {
        UnaryExpression(0);
      } catch (Throwable jjte002) {
                                                  if (jjtc002) {
                                                    jjtree.clearNodeScope(jjtn002);
                                                    jjtc002 = false;
                                                  } else {
                                                    jjtree.popNode();
                                                  }
                                                  if (jjte002 instanceof RuntimeException) {
                                                    {if (true) throw (RuntimeException)jjte002;}
                                                  }
                                                  if (jjte002 instanceof ParseException) {
                                                    {if (true) throw (ParseException)jjte002;}
                                                  }
                                                  {if (true) throw (Error)jjte002;}
      } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  3);
                                                    jjtreeCloseNodeScope(jjtn002);
                                                  }
      }
    }
  }

  final public void UnaryExpression(int i) throws ParseException {
        int j = i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
     YoyooPrefixOpt jjtn001 = new YoyooPrefixOpt(JJTPREFIXOPT);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(PLUS);
        } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
        }
                 j = j+1;
        break;
      case MINUS:
      YoyooPrefixOpt jjtn002 = new YoyooPrefixOpt(JJTPREFIXOPT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(MINUS);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
        }
                  j = j+1;
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression(j);
      break;
    case INCR:
      PreIncrementExpression(j);
      break;
    case DECR:
      PreDecrementExpression(j);
      break;
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case MULTILINE_STRING_LITERAL:
    case LPAREN:
    case BANG:
    case SLASH:
    case IDENTIFIER:
      UnaryExpressionNotPlusMinus(j);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression(int i) throws ParseException {
                int j= i+1;
    YoyooPrefixOpt jjtn001 = new YoyooPrefixOpt(JJTPREFIXOPT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(INCR);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    PrimaryExpression(j);
  }

  final public void PreDecrementExpression(int i) throws ParseException {
                int j= i+1;
    YoyooPrefixOpt jjtn001 = new YoyooPrefixOpt(JJTPREFIXOPT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      jj_consume_token(DECR);
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
    PrimaryExpression(j);
  }

  final public void UnaryExpressionNotPlusMinus(int i) throws ParseException {
        int j = i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      YoyooPrefixOpt jjtn001 = new YoyooPrefixOpt(JJTPREFIXOPT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(BANG);
      } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
      }
                  j=j+1;
      UnaryExpression(j);
      break;
    default:
      jj_la1[65] = jj_gen;
      if (jj_2_16(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case MULTILINE_STRING_LITERAL:
        case LPAREN:
        case SLASH:
        case IDENTIFIER:
          PostfixExpression(j);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PostfixExpression(int i) throws ParseException {
        int j = i;
    PrimaryExpression(j);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      YoyooPostfixExpr jjtn002 = new YoyooPostfixExpr(JJTPOSTFIXEXPR);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
      try {
       YoyooPostfixOpt jjtn001 = new YoyooPostfixOpt(JJTPOSTFIXOPT);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtreeOpenNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
            jj_consume_token(INCR);
            break;
          case DECR:
            jj_consume_token(DECR);
            break;
          default:
            jj_la1[67] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
         jjtreeCloseNodeScope(jjtn001);
       }
        }
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  2);
        jjtreeCloseNodeScope(jjtn002);
      }
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_17(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_18(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          jj_consume_token(117);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case MULTILINE_STRING_LITERAL:
        case SLASH:
          Literal();
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void CastExpression() throws ParseException {
 /*@bgen(jjtree) CastExpression */
  YoyooCastExpression jjtn000 = new YoyooCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_19(2147483647)) {
        jj_consume_token(LPAREN);
        YoyooCastType jjtn001 = new YoyooCastType(JJTCASTTYPE);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        jjtreeOpenNodeScope(jjtn001);
        try {
          Type();
        } catch (Throwable jjte001) {
        if (jjtc001) {
          jjtree.clearNodeScope(jjtn001);
          jjtc001 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte001 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte001;}
        }
        if (jjte001 instanceof ParseException) {
          {if (true) throw (ParseException)jjte001;}
        }
        {if (true) throw (Error)jjte001;}
        } finally {
        if (jjtc001) {
          jjtree.closeNodeScope(jjtn001, true);
          jjtreeCloseNodeScope(jjtn001);
        }
        }
        jj_consume_token(RPAREN);
                             YoyooCastExpr jjtn002 = new YoyooCastExpr(JJTCASTEXPR);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                             jjtreeOpenNodeScope(jjtn002);
        try {
          UnaryExpression(0);
        } catch (Throwable jjte002) {
                             if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte002;}
                             }
                             if (jjte002 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte002;}
                             }
                             {if (true) throw (Error)jjte002;}
        } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtreeCloseNodeScope(jjtn002);
                             }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
        YoyooCastType jjtn003 = new YoyooCastType(JJTCASTTYPE);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
          try {
            Type();
          } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
          } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtreeCloseNodeScope(jjtn003);
        }
          }
          jj_consume_token(RPAREN);
                             YoyooCastExpr jjtn004 = new YoyooCastExpr(JJTCASTEXPR);
                             boolean jjtc004 = true;
                             jjtree.openNodeScope(jjtn004);
                             jjtreeOpenNodeScope(jjtn004);
          try {
            UnaryExpressionNotPlusMinus(0);
          } catch (Throwable jjte004) {
                             if (jjtc004) {
                               jjtree.clearNodeScope(jjtn004);
                               jjtc004 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte004 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte004;}
                             }
                             if (jjte004 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte004;}
                             }
                             {if (true) throw (Error)jjte004;}
          } finally {
                             if (jjtc004) {
                               jjtree.closeNodeScope(jjtn004, true);
                               jjtreeCloseNodeScope(jjtn004);
                             }
          }
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void PrimaryExpression(int i) throws ParseException {
        int j = i+1;
    YoyooPrimaryExpr jjtn001 = new YoyooPrimaryExpr(JJTPRIMARYEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
    try {
      PrimaryPrefix();
      label_25:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_25;
        }
        PrimarySuffix();
                                                    j=j+1;
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  j);
      jjtreeCloseNodeScope(jjtn001);
    }
    }
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case MULTILINE_STRING_LITERAL:
    case SLASH:
      Literal();
      break;
    case THIS:
    YoyooThis jjtn001 = new YoyooThis(JJTTHIS);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
                 YoyooSuperRefId jjtn002 = new YoyooSuperRefId(JJTSUPERREFID);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
                 jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtreeCloseNodeScope(jjtn002);
                 }
      }
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
        YoyooBracketExpr jjtn003 = new YoyooBracketExpr(JJTBRACKETEXPR);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtreeOpenNodeScope(jjtn003);
      try {
        Expression();
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003, true);
          jjtreeCloseNodeScope(jjtn003);
        }
      }
      jj_consume_token(RPAREN);
      break;
    case NEW:
    YoyooAlloExpr jjtn004 = new YoyooAlloExpr(JJTALLOEXPR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
      try {
        AllocationExpression();
      } catch (Throwable jjte004) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte004 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte004;}
    }
    if (jjte004 instanceof ParseException) {
      {if (true) throw (ParseException)jjte004;}
    }
    {if (true) throw (Error)jjte004;}
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
      }
      break;
    case IDENTIFIER:
    YoyooNameExpr jjtn005 = new YoyooNameExpr(JJTNAMEEXPR);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
      try {
        Name();
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtreeCloseNodeScope(jjtn005);
    }
      }
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimarySuffix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
         YoyooArrayIndexExpr jjtn001 = new YoyooArrayIndexExpr(JJTARRAYINDEXEXPR);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
         if (jjtc001) {
           jjtree.clearNodeScope(jjtn001);
           jjtc001 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte001 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte001;}
         }
         if (jjte001 instanceof ParseException) {
           {if (true) throw (ParseException)jjte001;}
         }
         {if (true) throw (Error)jjte001;}
      } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
           jjtreeCloseNodeScope(jjtn001);
         }
      }
      jj_consume_token(RBRACKET);
      break;
    case DOT:
      jj_consume_token(DOT);
        YoyooRefId jjtn002 = new YoyooRefId(JJTREFID);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
        if (jjtc002) {
          jjtree.closeNodeScope(jjtn002, true);
          jjtreeCloseNodeScope(jjtn002);
        }
      }
      break;
    case LPAREN:
    YoyooArguments jjtn003 = new YoyooArguments(JJTARGUMENTS);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
      try {
        Arguments();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    YoyooLiteralInteger jjtn001 = new YoyooLiteralInteger(JJTLITERALINTEGER);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(INTEGER_LITERAL);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      break;
    case FLOATING_POINT_LITERAL:
    YoyooLiteralFloat jjtn002 = new YoyooLiteralFloat(JJTLITERALFLOAT);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
      try {
        jj_consume_token(FLOATING_POINT_LITERAL);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtreeCloseNodeScope(jjtn002);
    }
      }
      break;
    case CHARACTER_LITERAL:
    YoyooLiteralChar jjtn003 = new YoyooLiteralChar(JJTLITERALCHAR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
      try {
        jj_consume_token(CHARACTER_LITERAL);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
      }
      break;
    case STRING_LITERAL:
    case MULTILINE_STRING_LITERAL:
    YoyooLiteralString jjtn004 = new YoyooLiteralString(JJTLITERALSTRING);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        case MULTILINE_STRING_LITERAL:
          jj_consume_token(MULTILINE_STRING_LITERAL);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtreeCloseNodeScope(jjtn004);
    }
      }
      break;
    case FALSE:
    case TRUE:
    YoyooLiteralBoolean jjtn005 = new YoyooLiteralBoolean(JJTLITERALBOOLEAN);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
      try {
        BooleanLiteral();
      } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
      } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtreeCloseNodeScope(jjtn005);
    }
      }
      break;
    case NULL:
    YoyooLiteralNull jjtn006 = new YoyooLiteralNull(JJTLITERALNULL);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
      try {
        NullLiteral();
      } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
      } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtreeCloseNodeScope(jjtn006);
    }
      }
      break;
    case SLASH:
      SpecialExpr();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
    jj_consume_token(NULL);
  }

  final public void SpecialExprType() throws ParseException {
 /*@bgen(jjtree) SpecialExprType */
  YoyooSpecialExprType jjtn000 = new YoyooSpecialExprType(JJTSPECIALEXPRTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(YOYOOEXPR);
      jj_consume_token(SPECIALEXPRSTART);
                            YoyooSpecialExprTypeName jjtn001 = new YoyooSpecialExprTypeName(JJTSPECIALEXPRTYPENAME);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                            jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                              jjtreeCloseNodeScope(jjtn001);
                            }
      }
      jj_consume_token(SPECIALEXPREND);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_26;
        }
             YoyooArrayDecl jjtn002 = new YoyooArrayDecl(JJTARRAYDECL);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtreeCloseNodeScope(jjtn002);
             }
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void SpecialExpr() throws ParseException {
 /*@bgen(jjtree) SpecialExpr */
  YoyooSpecialExpr jjtn000 = new YoyooSpecialExpr(JJTSPECIALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SLASH);
              YoyooSpecialExprBody jjtn001 = new YoyooSpecialExprBody(JJTSPECIALEXPRBODY);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        case MULTILINE_STRING_LITERAL:
          jj_consume_token(MULTILINE_STRING_LITERAL);
          break;
        default:
          jj_la1[78] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
              }
      }
      jj_consume_token(SLASH);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Ref() throws ParseException {
 /*@bgen(jjtree) Ref */
  YoyooRef jjtn000 = new YoyooRef(JJTREF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(YOYOOREF);
      jj_consume_token(SPECIALEXPRSTART);
                      YoyooRefValueType jjtn001 = new YoyooRefValueType(JJTREFVALUETYPE);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtreeOpenNodeScope(jjtn001);
      try {
        Type();
      } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
      } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtreeCloseNodeScope(jjtn001);
                      }
      }
      jj_consume_token(SPECIALEXPREND);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_27;
        }
             YoyooArrayDecl jjtn002 = new YoyooArrayDecl(JJTARRAYDECL);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
             jjtreeOpenNodeScope(jjtn002);
        try {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
        } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002, true);
               jjtreeCloseNodeScope(jjtn002);
             }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NEW:
    case NULL:
    case SUPER:
    case THIS:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case MULTILINE_STRING_LITERAL:
    case LPAREN:
    case BANG:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case SLASH:
    case IDENTIFIER:
      ArgumentList();
      break;
    default:
      jj_la1[80] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void ArgumentList() throws ParseException {
     YoyooArgument jjtn001 = new YoyooArgument(JJTARGUMENT);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtreeOpenNodeScope(jjtn001);
    try {
      Expression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtreeCloseNodeScope(jjtn001);
     }
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[81] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
                                      YoyooArgument jjtn002 = new YoyooArgument(JJTARGUMENT);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
      try {
        Expression();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtreeCloseNodeScope(jjtn002);
                                      }
      }
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_21(2)) {
    YoyooAlloPrimitiveExpr jjtn001 = new YoyooAlloPrimitiveExpr(JJTALLOPRIMITIVEEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
    YoyooAlloReferenceExpr jjtn003 = new YoyooAlloReferenceExpr(JJTALLOREFERENCEEXPR);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
        try {
          jj_consume_token(NEW);
           YoyooAllocationName jjtn002 = new YoyooAllocationName(JJTALLOCATIONNAME);
           boolean jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtreeOpenNodeScope(jjtn002);
          try {
            ClassOrInterfaceType();
          } catch (Throwable jjte002) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte002 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte002;}
           }
           if (jjte002 instanceof ParseException) {
             {if (true) throw (ParseException)jjte002;}
           }
           {if (true) throw (Error)jjte002;}
          } finally {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002, true);
             jjtreeCloseNodeScope(jjtn002);
           }
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ArrayDimsAndInits();
            break;
          case LPAREN:
            Arguments();
            break;
          default:
            jj_la1[82] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
        } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtreeCloseNodeScope(jjtn003);
    }
        }
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
void ReferenceType() #ReferenceNameType :
{}
{  
  Name() 
}
*/
  final public void ArrayDimsAndInits() throws ParseException {
 /*@bgen(jjtree) ArrayDimsAndInits */
  YoyooArrayDimsAndInits jjtn000 = new YoyooArrayDimsAndInits(JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_24(2)) {
        label_29:
        while (true) {
          jj_consume_token(LBRACKET);
                       YoyooArrayDimsExpr jjtn001 = new YoyooArrayDimsExpr(JJTARRAYDIMSEXPR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
          try {
            Expression();
          } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
          } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtreeCloseNodeScope(jjtn001);
                       }
          }
          jj_consume_token(RBRACKET);
          if (jj_2_22(2)) {
            ;
          } else {
            break label_29;
          }
        }
        label_30:
        while (true) {
          if (jj_2_23(2)) {
            ;
          } else {
            break label_30;
          }
          jj_consume_token(LBRACKET);
                                                                            YoyooArrayDims jjtn002 = new YoyooArrayDims(JJTARRAYDIMS);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
                                                                            jjtreeOpenNodeScope(jjtn002);
          try {
            jj_consume_token(RBRACKET);
          } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                              jjtreeCloseNodeScope(jjtn002);
                                                                            }
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          label_31:
          while (true) {
            jj_consume_token(LBRACKET);
          YoyooArrayDims jjtn003 = new YoyooArrayDims(JJTARRAYDIMS);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
          jjtreeOpenNodeScope(jjtn003);
            try {
              jj_consume_token(RBRACKET);
            } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
            jjtreeCloseNodeScope(jjtn003);
          }
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[84] = jj_gen;
              break label_31;
            }
          }
          ArrayInitializer();
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_25(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case SLASH:
      case IDENTIFIER:
        StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LabeledStatement() throws ParseException {
 /*@bgen(jjtree) LabeledStatement */
  YoyooLabeledStatement jjtn000 = new YoyooLabeledStatement(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
    YoyooLabeledStmLabel jjtn001 = new YoyooLabeledStmLabel(JJTLABELEDSTMLABEL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(IDENTIFIER);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
      }
      jj_consume_token(COLON);
                                      YoyooLabeledStmBody jjtn002 = new YoyooLabeledStmBody(JJTLABELEDSTMBODY);
                                      boolean jjtc002 = true;
                                      jjtree.openNodeScope(jjtn002);
                                      jjtreeOpenNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
                                      if (jjtc002) {
                                        jjtree.clearNodeScope(jjtn002);
                                        jjtc002 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte002 instanceof RuntimeException) {
                                        {if (true) throw (RuntimeException)jjte002;}
                                      }
                                      if (jjte002 instanceof ParseException) {
                                        {if (true) throw (ParseException)jjte002;}
                                      }
                                      {if (true) throw (Error)jjte002;}
      } finally {
                                      if (jjtc002) {
                                        jjtree.closeNodeScope(jjtn002, true);
                                        jjtreeCloseNodeScope(jjtn002);
                                      }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void Block() throws ParseException {
 /*@bgen(jjtree) Block */
  YoyooBlock jjtn000 = new YoyooBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BREAK:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case THIS:
        case THROW:
        case SYNCHRONIZED:
        case TRUE:
        case TRY:
        case WHILE:
        case STRING:
        case YOYOOEXPR:
        case YOYOOREF:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case MULTILINE_STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
        case SLASH:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_32;
        }
        BlockStatement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_26(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case DO:
      case FALSE:
      case FOR:
      case IF:
      case NEW:
      case NULL:
      case RETURN:
      case SUPER:
      case SWITCH:
      case THIS:
      case THROW:
      case SYNCHRONIZED:
      case TRUE:
      case TRY:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
      case SLASH:
      case IDENTIFIER:
    YoyooBlockStatementBodyStm jjtn001 = new YoyooBlockStatementBodyStm(JJTBLOCKSTATEMENTBODYSTM);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
        try {
          Statement();
        } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
        } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtreeCloseNodeScope(jjtn001);
    }
        }
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
 /*@bgen(jjtree) LocalVariableDeclaration */
  YoyooLocalVariableDeclaration jjtn000 = new YoyooLocalVariableDeclaration(JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case STRING:
      case IDENTIFIER:
        Type();
        break;
      case YOYOOREF:
        Ref();
        break;
      case YOYOOEXPR:
        SpecialExprType();
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      VariableDeclarator();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void EmptyStatement() throws ParseException {
 /*@bgen(jjtree) EmptyStatement */
  YoyooEmptyStatement jjtn000 = new YoyooEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void StatementExpression() throws ParseException {
 /*@bgen(jjtree) StatementExpression */
  YoyooStatementExpression jjtn000 = new YoyooStatementExpression(JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        PreIncrementExpression(0);
        break;
      case DECR:
        PreDecrementExpression(0);
        break;
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case SLASH:
      case IDENTIFIER:
        PrimaryExpression(0);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case 116:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
      YoyooStmExprPostOpt jjtn001 = new YoyooStmExprPostOpt(JJTSTMEXPRPOSTOPT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtreeOpenNodeScope(jjtn001);
            try {
              jj_consume_token(INCR);
            } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtreeCloseNodeScope(jjtn001);
      }
            }
            break;
          case DECR:
      YoyooStmExprPostOpt jjtn002 = new YoyooStmExprPostOpt(JJTSTMEXPRPOSTOPT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtreeOpenNodeScope(jjtn002);
            try {
              jj_consume_token(DECR);
            } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
        jjtreeCloseNodeScope(jjtn002);
      }
            }
            break;
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case 116:
            AssignmentOperator();
                           YoyooStmExprAssignExpr jjtn003 = new YoyooStmExprAssignExpr(JJTSTMEXPRASSIGNEXPR);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                           jjtreeOpenNodeScope(jjtn003);
            try {
              Expression();
            } catch (Throwable jjte003) {
                           if (jjtc003) {
                             jjtree.clearNodeScope(jjtn003);
                             jjtc003 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte003 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte003;}
                           }
                           if (jjte003 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte003;}
                           }
                           {if (true) throw (Error)jjte003;}
            } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                             jjtreeCloseNodeScope(jjtn003);
                           }
            }
            break;
          default:
            jj_la1[90] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
  YoyooSwitchStatement jjtn000 = new YoyooSwitchStatement(JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
                 YoyooSwitchKey jjtn001 = new YoyooSwitchKey(JJTSWITCHKEY);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   {if (true) throw (RuntimeException)jjte001;}
                 }
                 if (jjte001 instanceof ParseException) {
                   {if (true) throw (ParseException)jjte001;}
                 }
                 {if (true) throw (Error)jjte001;}
      } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
      }
      jj_consume_token(RPAREN);
      jj_consume_token(LBRACE);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
        case _DEFAULT:
          ;
          break;
        default:
          jj_la1[93] = jj_gen;
          break label_33;
        }
        YoyooCaseStm jjtn004 = new YoyooCaseStm(JJTCASESTM);
        boolean jjtc004 = true;
        jjtree.openNodeScope(jjtn004);
        jjtreeOpenNodeScope(jjtn004);
        try {
          label_34:
          while (true) {
                        YoyooSwitchCase jjtn002 = new YoyooSwitchCase(JJTSWITCHCASE);
                        boolean jjtc002 = true;
                        jjtree.openNodeScope(jjtn002);
                        jjtreeOpenNodeScope(jjtn002);
            try {
              SwitchLabel();
            } catch (Throwable jjte002) {
                        if (jjtc002) {
                          jjtree.clearNodeScope(jjtn002);
                          jjtc002 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte002 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte002;}
                        }
                        if (jjte002 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte002;}
                        }
                        {if (true) throw (Error)jjte002;}
            } finally {
                        if (jjtc002) {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtreeCloseNodeScope(jjtn002);
                        }
            }
            if (jj_2_27(2)) {
              ;
            } else {
              break label_34;
            }
          }
          label_35:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BREAK:
            case CHAR:
            case CONTINUE:
            case DO:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case FOR:
            case IF:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case RETURN:
            case SHORT:
            case SUPER:
            case SWITCH:
            case THIS:
            case THROW:
            case SYNCHRONIZED:
            case TRUE:
            case TRY:
            case WHILE:
            case STRING:
            case YOYOOEXPR:
            case YOYOOREF:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case MULTILINE_STRING_LITERAL:
            case LPAREN:
            case LBRACE:
            case SEMICOLON:
            case INCR:
            case DECR:
            case SLASH:
            case IDENTIFIER:
              ;
              break;
            default:
              jj_la1[94] = jj_gen;
              break label_35;
            }
                                                     YoyooCaseBlockStm jjtn003 = new YoyooCaseBlockStm(JJTCASEBLOCKSTM);
                                                     boolean jjtc003 = true;
                                                     jjtree.openNodeScope(jjtn003);
                                                     jjtreeOpenNodeScope(jjtn003);
            try {
              BlockStatement();
            } catch (Throwable jjte003) {
                                                     if (jjtc003) {
                                                       jjtree.clearNodeScope(jjtn003);
                                                       jjtc003 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte003 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte003;}
                                                     }
                                                     if (jjte003 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte003;}
                                                     }
                                                     {if (true) throw (Error)jjte003;}
            } finally {
                                                     if (jjtc003) {
                                                       jjtree.closeNodeScope(jjtn003, true);
                                                       jjtreeCloseNodeScope(jjtn003);
                                                     }
            }
          }
        } catch (Throwable jjte004) {
        if (jjtc004) {
          jjtree.clearNodeScope(jjtn004);
          jjtc004 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte004 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte004;}
        }
        if (jjte004 instanceof ParseException) {
          {if (true) throw (ParseException)jjte004;}
        }
        {if (true) throw (Error)jjte004;}
        } finally {
        if (jjtc004) {
          jjtree.closeNodeScope(jjtn004, jjtree.nodeArity() > 1);
          jjtreeCloseNodeScope(jjtn004);
        }
        }
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
                     YoyooSwitchDefault jjtn001 = new YoyooSwitchDefault(JJTSWITCHDEFAULT);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtreeOpenNodeScope(jjtn001);
      try {
        jj_consume_token(COLON);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtreeCloseNodeScope(jjtn001);
                     }
      }
      break;
    case CASE:
      jj_consume_token(CASE);
                  YoyooCaseExpr jjtn002 = new YoyooCaseExpr(JJTCASEEXPR);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtreeOpenNodeScope(jjtn002);
      try {
        Expression();
      } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
      } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                    jjtreeCloseNodeScope(jjtn002);
                  }
      }
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  YoyooIfStatement jjtn000 = new YoyooIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
             YoyooIfCondExpr jjtn001 = new YoyooIfCondExpr(JJTIFCONDEXPR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte001;}
             }
             if (jjte001 instanceof ParseException) {
               {if (true) throw (ParseException)jjte001;}
             }
             {if (true) throw (Error)jjte001;}
      } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtreeCloseNodeScope(jjtn001);
             }
      }
      jj_consume_token(RPAREN);
                                          YoyooIfStm jjtn002 = new YoyooIfStm(JJTIFSTM);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                          jjtreeOpenNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
                                          if (jjtc002) {
                                            jjtree.clearNodeScope(jjtn002);
                                            jjtc002 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte002 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte002;}
                                          }
                                          if (jjte002 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte002;}
                                          }
                                          {if (true) throw (Error)jjte002;}
      } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                            jjtreeCloseNodeScope(jjtn002);
                                          }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
                                                                                  YoyooElseStm jjtn003 = new YoyooElseStm(JJTELSESTM);
                                                                                  boolean jjtc003 = true;
                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                  jjtreeOpenNodeScope(jjtn003);
        try {
          Statement();
        } catch (Throwable jjte003) {
                                                                                  if (jjtc003) {
                                                                                    jjtree.clearNodeScope(jjtn003);
                                                                                    jjtc003 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte003 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte003;}
                                                                                  }
                                                                                  if (jjte003 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte003;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte003;}
        } finally {
                                                                                  if (jjtc003) {
                                                                                    jjtree.closeNodeScope(jjtn003, true);
                                                                                    jjtreeCloseNodeScope(jjtn003);
                                                                                  }
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  YoyooWhileStatement jjtn000 = new YoyooWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
                YoyooWhileCond jjtn001 = new YoyooWhileCond(JJTWHILECOND);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtreeCloseNodeScope(jjtn001);
                }
      }
      jj_consume_token(RPAREN);
                                           YoyooLoopStm jjtn002 = new YoyooLoopStm(JJTLOOPSTM);
                                           boolean jjtc002 = true;
                                           jjtree.openNodeScope(jjtn002);
                                           jjtreeOpenNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
                                           if (jjtc002) {
                                             jjtree.clearNodeScope(jjtn002);
                                             jjtc002 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                           if (jjte002 instanceof RuntimeException) {
                                             {if (true) throw (RuntimeException)jjte002;}
                                           }
                                           if (jjte002 instanceof ParseException) {
                                             {if (true) throw (ParseException)jjte002;}
                                           }
                                           {if (true) throw (Error)jjte002;}
      } finally {
                                           if (jjtc002) {
                                             jjtree.closeNodeScope(jjtn002, true);
                                             jjtreeCloseNodeScope(jjtn002);
                                           }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
  YoyooDoStatement jjtn000 = new YoyooDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
         YoyooLoopStm jjtn001 = new YoyooLoopStm(JJTLOOPSTM);
         boolean jjtc001 = true;
         jjtree.openNodeScope(jjtn001);
         jjtreeOpenNodeScope(jjtn001);
      try {
        Statement();
      } catch (Throwable jjte001) {
         if (jjtc001) {
           jjtree.clearNodeScope(jjtn001);
           jjtc001 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte001 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte001;}
         }
         if (jjte001 instanceof ParseException) {
           {if (true) throw (ParseException)jjte001;}
         }
         {if (true) throw (Error)jjte001;}
      } finally {
         if (jjtc001) {
           jjtree.closeNodeScope(jjtn001, true);
           jjtreeCloseNodeScope(jjtn001);
         }
      }
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
                                         YoyooDoCond jjtn002 = new YoyooDoCond(JJTDOCOND);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                         jjtreeOpenNodeScope(jjtn002);
      try {
        Expression();
      } catch (Throwable jjte002) {
                                         if (jjtc002) {
                                           jjtree.clearNodeScope(jjtn002);
                                           jjtc002 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte002 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte002;}
                                         }
                                         if (jjte002 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte002;}
                                         }
                                         {if (true) throw (Error)jjte002;}
      } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002, true);
                                           jjtreeCloseNodeScope(jjtn002);
                                         }
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  YoyooForStatement jjtn000 = new YoyooForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case STRING:
      case YOYOOEXPR:
      case YOYOOREF:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case SLASH:
      case IDENTIFIER:
        ForInit();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
      case IDENTIFIER:
                                  YoyooForCond jjtn001 = new YoyooForCond(JJTFORCOND);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtreeOpenNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtreeCloseNodeScope(jjtn001);
                                  }
        }
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case INCR:
      case DECR:
      case SLASH:
      case IDENTIFIER:
        ForUpdate();
        break;
      default:
        jj_la1[99] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                                                 YoyooLoopStm jjtn002 = new YoyooLoopStm(JJTLOOPSTM);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
                                                                                 jjtreeOpenNodeScope(jjtn002);
      try {
        Statement();
      } catch (Throwable jjte002) {
                                                                                 if (jjtc002) {
                                                                                   jjtree.clearNodeScope(jjtn002);
                                                                                   jjtc002 = false;
                                                                                 } else {
                                                                                   jjtree.popNode();
                                                                                 }
                                                                                 if (jjte002 instanceof RuntimeException) {
                                                                                   {if (true) throw (RuntimeException)jjte002;}
                                                                                 }
                                                                                 if (jjte002 instanceof ParseException) {
                                                                                   {if (true) throw (ParseException)jjte002;}
                                                                                 }
                                                                                 {if (true) throw (Error)jjte002;}
      } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002, true);
                                                                                   jjtreeCloseNodeScope(jjtn002);
                                                                                 }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ForInit() throws ParseException {
 /*@bgen(jjtree) ForInit */
  YoyooForInit jjtn000 = new YoyooForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_28(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FALSE:
        case NEW:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case MULTILINE_STRING_LITERAL:
        case LPAREN:
        case INCR:
        case DECR:
        case SLASH:
        case IDENTIFIER:
          StatementExpressionList();
          break;
        default:
          jj_la1[100] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_36:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_36;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
 /*@bgen(jjtree) ForUpdate */
  YoyooForUpdate jjtn000 = new YoyooForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  YoyooBreakStatement jjtn000 = new YoyooBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
              YoyooBreakLabel jjtn001 = new YoyooBreakLabel(JJTBREAKLABEL);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
              jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(IDENTIFIER);
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
                jjtreeCloseNodeScope(jjtn001);
              }
        }
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  YoyooContinueStatement jjtn000 = new YoyooContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
                 YoyooContinueLabel jjtn001 = new YoyooContinueLabel(JJTCONTINUELABEL);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
        try {
          jj_consume_token(IDENTIFIER);
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtreeCloseNodeScope(jjtn001);
                 }
        }
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  YoyooReturnStatement jjtn000 = new YoyooReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case SUPER:
      case THIS:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case MULTILINE_STRING_LITERAL:
      case LPAREN:
      case BANG:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case SLASH:
      case IDENTIFIER:
               YoyooReturnExpr jjtn001 = new YoyooReturnExpr(JJTRETURNEXPR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtreeOpenNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
        } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtreeCloseNodeScope(jjtn001);
               }
        }
        break;
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
  YoyooThrowStatement jjtn000 = new YoyooThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(THROW);
            YoyooThrowExpr jjtn001 = new YoyooThrowExpr(JJTTHROWEXPR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtreeCloseNodeScope(jjtn001);
            }
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void SynchronizedStatement() throws ParseException {
 /*@bgen(jjtree) SynchronizedStatement */
  YoyooSynchronizedStatement jjtn000 = new YoyooSynchronizedStatement(JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(SYNCHRONIZED);
      jj_consume_token(LPAREN);
                       YoyooSynExpr jjtn001 = new YoyooSynExpr(JJTSYNEXPR);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtreeOpenNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
      } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001, true);
                         jjtreeCloseNodeScope(jjtn001);
                       }
      }
      jj_consume_token(RPAREN);
                                                YoyooSynBlock jjtn002 = new YoyooSynBlock(JJTSYNBLOCK);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);
      try {
        Block();
      } catch (Throwable jjte002) {
                                                if (jjtc002) {
                                                  jjtree.clearNodeScope(jjtn002);
                                                  jjtc002 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte002 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte002;}
                                                }
                                                if (jjte002 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte002;}
                                                }
                                                {if (true) throw (Error)jjte002;}
      } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002, true);
                                                  jjtreeCloseNodeScope(jjtn002);
                                                }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  final public void TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
  YoyooTryStatement jjtn000 = new YoyooTryStatement(JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(TRY);
           YoyooTryBlock jjtn001 = new YoyooTryBlock(JJTTRYBLOCK);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtreeOpenNodeScope(jjtn001);
      try {
        Block();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
             jjtreeCloseNodeScope(jjtn001);
           }
      }
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[105] = jj_gen;
          break label_37;
        }
        jj_consume_token(CATCH);
        jj_consume_token(LPAREN);
        FormalParameter();
        jj_consume_token(RPAREN);
                                        YoyooCatchBlock jjtn002 = new YoyooCatchBlock(JJTCATCHBLOCK);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                        jjtreeOpenNodeScope(jjtn002);
        try {
          Block();
        } catch (Throwable jjte002) {
                                        if (jjtc002) {
                                          jjtree.clearNodeScope(jjtn002);
                                          jjtc002 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte002 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte002;}
                                        }
                                        if (jjte002 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte002;}
                                        }
                                        {if (true) throw (Error)jjte002;}
        } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtreeCloseNodeScope(jjtn002);
                                        }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
                YoyooFinallyBlock jjtn003 = new YoyooFinallyBlock(JJTFINALLYBLOCK);
                boolean jjtc003 = true;
                jjtree.openNodeScope(jjtn003);
                jjtreeOpenNodeScope(jjtn003);
        try {
          Block();
        } catch (Throwable jjte003) {
                if (jjtc003) {
                  jjtree.clearNodeScope(jjtn003);
                  jjtc003 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte003 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte003;}
                }
                if (jjte003 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte003;}
                }
                {if (true) throw (Error)jjte003;}
        } finally {
                if (jjtc003) {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtreeCloseNodeScope(jjtn003);
                }
        }
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_3R_112() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_102()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_95()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_116()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_69()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    if (jj_3R_132()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_46()) return true;
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_92()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(YOYOOREF)) return true;
    if (jj_scan_token(SPECIALEXPRSTART)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(SPECIALEXPREND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(SLASH)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(YOYOOEXPR)) return true;
    if (jj_scan_token(SPECIALEXPRSTART)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SPECIALEXPREND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_50()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_48()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_41()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) return true;
    }
    }
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    }
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_127()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_119()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public YoyooParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[107];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x80000,0x80000,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x42180000,0x42100000,0x0,0x0,0x0,0x6a300000,0x0,0x0,0x80000,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x42100000,0x0,0x0,0x0,0x0,0x0,0x0,0x42100000,0x42100000,0x42100000,0x42100000,0x42100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28200000,0x6a300000,0x28200000,0x42100000,0x0,0x0,0x0,0x10800000,0x6a300000,0x10800000,0x80000000,0x42100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20000,0x200,0x1c1000,0x0,0x1000,0x1c1000,0x1c0000,0x1c0000,0x0,0x1,0x100,0x0,0x0,0xdc2814,0xdc2814,0x800000,0x800000,0x10000000,0xef61a8b2,0x45018002,0x800000,0x0,0x800000,0x0,0x10000000,0x0,0x0,0x800000,0x4,0x402810,0x0,0x0,0x45018002,0x45018002,0x0,0x0,0x402810,0x402810,0x402810,0x402810,0x402810,0x0,0x1000001,0x0,0x1000001,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x45018002,0x0,0x45018002,0x0,0x0,0x45018002,0x0,0x0,0x45018002,0x0,0x0,0x40010002,0x40000002,0x0,0x0,0x0,0x45018002,0x0,0x0,0x8000,0x0,0x0,0xef2180a2,0xef61a8b2,0xef2180a2,0x402810,0x0,0x0,0x45018002,0x0,0xef61a8b2,0x0,0x0,0x4541a812,0x45018002,0x45018002,0x45018002,0x0,0x0,0x0,0x45018002,0x0,0x8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,0x2000000,0x0,0x0,0x200000,0x200000,0x10001d,0x10001c,0x0,0x0,0x0,0x117a3e,0x7a20,0x0,0x0,0x0,0x0,0x0,0x110000,0x40000,0x0,0x0,0x1c,0x800000,0x40000,0x4017a20,0x4017a20,0x200000,0x200000,0x4,0x4,0x4,0x4,0x5,0x200000,0x0,0x8000000,0x0,0x200000,0x0,0x0,0x200000,0x800000,0x800000,0x8000000,0x0,0x0,0x20000000,0x20000000,0x0,0xc3000000,0xc3000000,0x0,0x0,0x0,0x0,0x0,0x4007a20,0x4000000,0x7a20,0x0,0x0,0x4007a20,0x4000,0x4000,0x7a20,0x444000,0x3000,0x3a20,0x0,0x40000,0x3000,0x40000,0x4007a20,0x200000,0x44000,0x0,0x40000,0x40000,0x117a22,0x117a3e,0x117a22,0x1c,0x800000,0x800000,0x7a20,0x0,0x117a3e,0x0,0x0,0x7a3c,0x4007a20,0x7a20,0x7a20,0x200000,0x0,0x0,0x4007a20,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x10000,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x10118,0x10100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x10178,0x10178,0x0,0x0,0x10000,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x103c00,0x103c00,0x0,0x2,0x4,0x1,0x1,0x0,0x0,0x0,0x60,0x60,0x380,0x380,0x60,0x10178,0x0,0x10100,0x18,0x18,0x210100,0x0,0x0,0x10100,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x10178,0x0,0x0,0x0,0x0,0x0,0x10118,0x10118,0x10118,0x10000,0x103c18,0x103c18,0x10118,0x0,0x10118,0x0,0x0,0x10118,0x10178,0x10118,0x10118,0x0,0x10000,0x10000,0x10178,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[28];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public YoyooParser(CharStream stream) {
    token_source = new YoyooParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public YoyooParser(YoyooParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(YoyooParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[118];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 107; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 118; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
